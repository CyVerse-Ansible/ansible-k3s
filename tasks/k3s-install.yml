- name: SET_FACT; set install k3s version only if K3S_VERSION is defined
  set_fact:
    k3s_version: "INSTALL_K3S_VERSION={{ K3S_VERSION }}"
  when: K3S_VERSION is defined

- name: SET_FACT; set k3s_docker_flag only if INTERNAL_DOCKER_ENABLE is defined and true
  set_fact:
    k3s_docker_flag:  "--docker"
  when: INTERNAL_DOCKER_ENABLE|bool
#
# - name: SET_FACT; set k3s_disable_traefik if K3S_TRAEFIK_ENABLE is undefined or false
#   set_fact:
#     k3s_disable_traefik:  "--disable traefik --disable-network-policy"
#   when: K3S_TRAEFIK_ENABLE is undefined or not K3S_TRAEFIK_ENABLE|bool
#
# - name: SET_FACT; set k3s_flannel_backend if K3s_FLANNEL_BACKEND is defined
#   set_fact:
#     k3s_flannel_backend:  "--flannel-backend={{ K3s_FLANNEL_BACKEND }}"
#   when: K3s_FLANNEL_BACKEND is defined
#
- name: SET_FACT; set k3s_calico_enable if K3S_CALICO_ENABLE is true
  set_fact:
    k3s_calico_enable:  "--flannel-backend=none --disable-network-policy"
  when: K3S_CALICO_ENABLE is defined and K3S_CALICO_ENABLE|bool
#
# - name: SET_FACT; set k3s_token if K3S_CLUSTER_TOKEN is set
#   set_fact:
#     k3s_token:  "K3S_TOKEN=\"{{ K3S_CLUSTER_TOKEN }}\""
#   when: K3S_CLUSTER_TOKEN is defined
#
# - name: SET_FACT; set k3s_cluster_cidr if K3S_CLUSTER_CIDR is set
#   set_fact:
#     k3s_cluster_cidr:  "--cluster-cidr=\"{{ K3S_CLUSTER_CIDR }}\""
#   when: K3S_CLUSTER_CIDR is defined

# - name: SET_FACT; set k3s_servicelb_disable if K3S_SERVICELB_DISABLE is true
#   set_fact:
#     k3s_servicelb_disable:  "--disable servicelb"
#   when: K3S_SERVICELB_DISABLE|bool == true

# - name: SET_FACT; set install_k3s_exec
#   set_fact:
#     install_k3s_master_exec:  "INSTALL_K3S_EXEC=\"{{ k3s_disable_traefik | default('') }} {{ k3s_calico_enable | default('') }} {{ k3s_cluster_cidr | default('') }} {{ k3s_flannel_backend | default('') }}\""
#     install_k3s_worker_exec:  "INSTALL_K3S_EXEC=\"{{ k3s_calico_enable | default('') }}\""
#
# - name: SET_FACT; set k3s_postgresql_env if K3S_POSTGRESQL_ENABLE is defined and true
#   set_fact:
#     k3s_postgresql_env:  "K3S_DATASTORE_ENDPOINT='postgres://{{ K3S_POSTGRESQL_USER }}:{{ K3S_POSTGRESQL_PASS }}@{{ K3S_POSTGRESQL_HOST }}:{{ K3S_POSTGRESQL_PORT }}/{{ K3S_POSTGRESQL_DB }}'"
#   when: inventory_hostname in groups['k3s_masters'] and K3S_POSTGRESQL_ENABLE is defined and K3S_POSTGRESQL_ENABLE|bool

- name: FILE; create K3S_INSTALL_DIR
  file:
    path: "{{ K3S_INSTALL_DIR }}"
    state: directory
    mode: 0755

# This local action was added to prevent ddos k3s download if we had 100s of vms. If this becomes problematic, we can change this approach to an option
# The actual download ~27K and should be very fast to transfer locally (as of 5/13/2022)
- name: LOCAL_ACTION; download the k3s installer once for everyone
  local_action:
    module: shell
    cmd: curl -sfL -o /tmp/k3s_install.sh https://get.k3s.io
    args:
      warn: false
      creates: /tmp/k3s_install.sh
  become: false
  run_once: true

- name: COPY; copy over the installer into K3S_INSTALL_DIR/k3s_install.sh
  copy:
    src: /tmp/k3s_install.sh
    dest: "{{ K3S_INSTALL_DIR }}/k3s_install.sh"
    mode: 0755

###
# Install master node
###
- name: Create the /etc/rancher/k3s directory
  ansible.builtin.file:
    path: /etc/rancher/k3s
    owner: root
    group: root
    state: directory

- name: Block to install k3s on master nodes
  block:
    - name: create the k3s master config
      ansible.builtin.template:
        src: master-k3-sconfig.yaml.j2
        dest: /etc/rancher/k3s/config.yaml

    - name: SHELL; execute install script on master nodes first
      shell: "{{ k3s_version | default('') }} INSTALL_K3S_SKIP_START=true {{ K3S_INSTALL_DIR }}/k3s_install.sh {{ k3s_docker_flag | default('') }} {{ k3s_calico_enable | default('') }} >{{ K3S_INSTALL_DIR }}/install.`date +'%Y%m%d-%H:%M'`.log 2>&1"
      args:
        warn: false

    # need this because this error:  Error while dialing dial unix /run/k3s/cri-dockerd/cri-dockerd.sock: connect: no such file or directory
    - name: SYSTEMD; with k3s installed, let's start and wait for k3s service
      systemd:
        name: k3s
        state: started
        enabled: true
      register: k3s_service
      until: k3s_service.status.ActiveState is defined and k3s_service.status.ActiveState == "active"
      retries: 15
      delay: 20

  when: inventory_hostname in groups['k3s_masters'] and K3S_MASTER_INSTALL is defined and K3S_MASTER_INSTALL|bool

- name: SET_FACT; obtain the k3s_master_ip
  set_fact:
    k3s_master_ip: "{{ hostvars[groups['k3s_masters'][0]]['ansible_default_ipv4']['address'] }}"
    k3s_master_url: "https://{{ hostvars[groups['k3s_masters'][0]]['ansible_default_ipv4']['address'] }}:{{ K3S_MASTER_PORT }}"
  when: K3S_MASTER_IP is not defined

- name: SET_FACT; set the k3s_master_ip based on given value
  set_fact:
    k3s_master_ip: "{{ K3S_MASTER_IP }}"
    k3s_master_url: "https://{{ K3S_MASTER_IP }}:{{ K3S_MASTER_PORT }}"
  when: K3S_MASTER_IP is defined

- block:
  - name: SHELL; grab the token from the master
    shell: cat /var/lib/rancher/k3s/server/node-token
    register: k3s_master_token_file
    delegate_to: "{{ groups['k3s_masters'][0] }}"
    run_once: true

  - name: SET_FACT; set the k3s_token fact for all nodes
    set_fact:
      k3s_token: "K3S_TOKEN=\"{{ k3s_master_token_file.stdout }}\""
  # when: K3S_CLUSTER_TOKEN is undefined
  # run_once: true

- name: DEBUG; print master url and token
  debug:
    msg: "k3s master url = {{ k3s_master_url }}, token = {{ k3s_token }}"

- import_tasks: k3s-install-gpu-nvidia-drivers.yml
  when: inventory_hostname in groups['k3s_masters'] and K3S_GPU_ENABLE|bool
  environment:
    KUBECONFIG: "{{ K3S_KUBE_CONFIG }}"

###
# Install agent nodes
####
- name: Block to install k3s agents
  block:
    - name: create the k3s agent config
      ansible.builtin.template:
        src: agent-k3s-config.yaml.j2
        dest: /etc/rancher/k3s/config.yaml

    - name: SHELL; execute install script on agent nodes
      shell: "K3S_URL={{ k3s_master_url }} {{ k3s_token }} {{ k3s_version | default('') }} INSTALL_K3S_SKIP_START=true {{ K3S_INSTALL_DIR }}/k3s_install.sh {{ k3s_docker_flag | default('') }} >{{ K3S_INSTALL_DIR }}/install.`date +'%Y%m%d-%H:%M'`.log 2>&1"
      args:
        warn: false

    # need this because this error:  Error while dialing dial unix /run/k3s/cri-dockerd/cri-dockerd.sock: connect: no such file or directory
    - name: SYSTEMD; with k3s installed, let's start and wait for k3s agent
      systemd:
        name: k3s-agent 
        state: started
        enabled: true
      register: k3s_agent_service
      until: k3s_agent_service.status.ActiveState is defined and k3s_agent_service.status.ActiveState == "active"
      retries: 15
      delay: 20
  when: groups['k3s_agents'] is defined and inventory_hostname in groups['k3s_agents']

- name: SHELL; install calico block
  block:
  - name: SHELL; add calico repo in helm
    ansible.builtin.shell:
      cmd: helm repo add projectcalico https://docs.tigera.io/calico/charts

  - name: SHELL; helm repo update
    ansible.builtin.shell:
      cmd: helm repo update

  - name: SHELL; create tigera-operator namespace
    ansible.builtin.shell:
      cmd: kubectl create namespace tigera-operator

  - name: SHELL; install the calico operator
    ansible.builtin.shell:
      cmd: helm install calico projectcalico/tigera-operator --version {{ K3S_CALICO_VERSION }} --namespace tigera-operator
    environment: 
      KUBECONFIG: "{{ K3S_KUBE_CONFIG }}"

  # - name: SHELL; install operator and crd
  #   shell: "kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/{{ K3S_CALICO_VERSION }}/manifests/tigera-operator.yaml"

  # - name: SHELL; install calico
  #   shell: "kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/{{ K3S_CALICO_VERSION }}/manifests/custom-resources.yaml"

  - name: SHELL; install the calico command line k3s_master_token_file.stdout
    ansible.builtin.get_url:
      url: https://github.com/projectcalico/calico/releases/download/{{ K3S_CALICO_VERSION }}/calicoctl-linux-amd64
      dest: /usr/local/bin/calicoctl
      mode: '0775'

  - name: APT; install jq
    apt:
      name: jq
      state: present
      update_cache: yes
    register: apt_result
    until: apt_result is not failed
    retries: 30
    delay: 10

  - name: SHELL; updates the calico configmap to allow ip forwarding
    ansible.builtin.shell:
      executable: /bin/bash
      cmd: |
        cp /etc/cni/net.d/10-calico.conflist {{ K3S_INSTALL_DIR }}/10-calico.conflist.orig
        jq '.plugins[0].container_settings.allow_ip_forwarding = true' /etc/cni/net.d/10-calico.conflist > {{ K3S_INSTALL_DIR }}/10-calico.conflist
        kubectl delete configmap cni-config -n calico-system
        kubectl create configmap cni-config -n calico-system --from-file={{ K3S_INSTALL_DIR }}/10-calico.conflist
    environment: 
      KUBECONFIG: "{{ K3S_KUBE_CONFIG }}"

  when:
  - inventory_hostname in groups['k3s_masters']
  - K3S_CALICO_ENABLE is defined and K3S_CALICO_ENABLE|bool
