- name: SET_FACT; set install k3s version only if K3S_VERSION is defined
  set_fact:
    k3s_version: "INSTALL_K3S_VERSION={{ K3S_VERSION }}"
  when: K3S_VERSION is defined

- name: SET_FACT; set k3s_docker_flag only if K3S_DOCKER_ENABLE is defined and true
  set_fact:
    k3s_docker_flag:  "--docker"
  when: K3S_DOCKER_ENABLE is defined and K3S_DOCKER_ENABLE|bool

- name: SET_FACT; set k3s_disable_traefik if K3S_TRAEFIK_ENABLE is undefined or false
  set_fact:
    k3s_disable_traefik:  "--disable traefik --disable-network-policy"
  when: K3S_TRAEFIK_ENABLE is undefined or not K3S_TRAEFIK_ENABLE|bool

- name: SET_FACT; set k3s_flannel_backend if K3s_FLANNEL_BACKEND is defined
  set_fact:
    k3s_flannel_backend:  "--flannel-backend={{ K3s_FLANNEL_BACKEND }}"
  when: K3s_FLANNEL_BACKEND is defined

- name: SET_FACT; set k3s_calico_enable if K3S_CALICO_ENABLE is true
  set_fact:
    k3s_calico_enable:  "--flannel-backend=none --disable-network-policy"
  when: K3S_CALICO_ENABLE is defined and K3S_CALICO_ENABLE|bool

- name: SET_FACT; set k3s_token if K3S_CLUSTER_TOKEN is set
  set_fact:
    k3s_token:  "K3S_TOKEN=\"{{ K3S_CLUSTER_TOKEN }}\""
  when: K3S_CLUSTER_TOKEN is defined

- name: SET_FACT; set k3s_cluster_cidr if K3S_CLUSTER_CIDR is set
  set_fact:
    k3s_cluster_cidr:  "--cluster-cidr=\"{{ K3S_CLUSTER_CIDR }}\""
  when: K3S_CLUSTER_CIDR is defined

- name: SET_FACT; set k3s_tls_san if K3S_TLS_SAN_ADD_PUBLIC_IP is set
  set_fact:
    k3s_tls_san:  "--k3s_tls_san=\"{{ ansible_host }}\""
  when: K3S_TLS_SAN_ADD_PUBLIC_IP is defined and K3S_TLS_SAN_ADD_PUBLIC_IP|bool

# - name: SET_FACT; set k3s_servicelb_disable if K3S_SERVICELB_DISABLE is true
#   set_fact:
#     k3s_servicelb_disable:  "--disable servicelb"
#   when: K3S_SERVICELB_DISABLE|bool == true

- name: SET_FACT; set install_k3s_exec
  set_fact:
    install_k3s_master_exec:  "INSTALL_K3S_EXEC=\"{{ k3s_tls_san | default('') }} {{ k3s_disable_traefik | default('') }} {{ k3s_calico_enable | default('') }} {{ k3s_cluster_cidr | default('') }} {{ k3s_flannel_backend | default('') }}\""
    install_k3s_worker_exec:  "INSTALL_K3S_EXEC=\"{{ k3s_calico_enable | default('') }}\""

- name: SET_FACT; set k3s_postgresql_env if K3S_POSTGRESQL_ENABLE is defined and true
  set_fact:
    k3s_postgresql_env:  "K3S_DATASTORE_ENDPOINT='postgres://{{ K3S_POSTGRESQL_USER }}:{{ K3S_POSTGRESQL_PASS }}@{{ K3S_POSTGRESQL_HOST }}:{{ K3S_POSTGRESQL_PORT }}/{{ K3S_POSTGRESQL_DB }}'"
  when: inventory_hostname in groups['k3s_masters'] and K3S_POSTGRESQL_ENABLE is defined and K3S_POSTGRESQL_ENABLE|bool

- name: FILE; create /opt/k3s
  file:
    path: /opt/k3s
    state: directory
    mode: 0755

# This local action was added to prevent ddos k3s download if we had 100s of vms. If this becomes problematic, we can change this approach to an option
# The actual download ~27K and should be very fast to transfer locally (as of 5/13/2022)
- name: LOCAL_ACTION; download the k3s installer once for everyone
  local_action: 
    module: shell
    cmd: curl -sfL -o /tmp/k3s_install.sh https://get.k3s.io
    args:
      warn: false
      creates: /tmp/k3s_install.sh
  become: false
  run_once: true

- name: COPY; copy over the installer into /opt/k3s/k3s_install.sh
  copy:
    src: /tmp/k3s_install.sh
    dest: /opt/k3s/k3s_install.sh
    mode: 0755

###
# Install master node
###

- name: SHELL; execute install script on master nodes first
  shell: "K3S_KUBECONFIG_MODE=\"644\" {{ k3s_postgresql_env | default('') }} {{ k3s_version | default('') }} {{ install_k3s_master_exec }} {{ k3s_token | default('') }} /opt/k3s/k3s_install.sh {{ k3s_docker_flag | default('') }} >/opt/k3s/install.`date +'%Y%m%d-%H:%M'`.log 2>&1"
  args:
    warn: false
  when: inventory_hostname in groups['k3s_masters'] and K3S_MASTER_INSTALL is defined and K3S_MASTER_INSTALL|bool

- name: SET_FACT; obtain the k3s_master_ip
  set_fact:
    k3s_master_ip: "{{ hostvars[groups['k3s_masters'][0]]['ansible_default_ipv4']['address'] }}"
    k3s_master_url: "https://{{ hostvars[groups['k3s_masters'][0]]['ansible_default_ipv4']['address'] }}:{{ K3S_MASTER_PORT }}"
  when: K3S_MASTER_IP is not defined

- name: SET_FACT; set the k3s_master_ip based on given value
  set_fact:
    k3s_master_ip: "{{ K3S_MASTER_IP }}"
    k3s_master_url: "https://{{ K3S_MASTER_IP }}:{{ K3S_MASTER_PORT }}"
  when: K3S_MASTER_IP is defined

- name: SHELL; add label cacao.io/k3s-master=true to all masters
  shell: "kubectl label node --overwrite=true {{ inventory_hostname }} cyverse.org/k3s-master=true"
  when: inventory_hostname in groups['k3s_masters'] 
  delegate_to: "{{ groups['k3s_masters'][0] }}"

- name: SHELL; add index cyverse.org/k3s-master-index=n for each master
  shell: "kubectl label node --overwrite=true {{ groups['k3s_masters'][idx] }} cyverse.org/k3s-master-index={{ idx }}"
  loop: "{{ groups['k3s_masters'] }}"
  loop_control:
    index_var: idx
  delegate_to: "{{ groups['k3s_masters'][0] }}"

- block:
  - name: SHELL; grab the token from the master
    shell: cat /var/lib/rancher/k3s/server/node-token
    register: k3s_master_token_file
    delegate_to: "{{ groups['k3s_masters'][0] }}"
    run_once: true

  - name: SET_FACT; set the k3s_token fact for all nodes
    set_fact:
      k3s_token: "K3S_TOKEN=\"{{ k3s_master_token_file.stdout }}\""
  when: K3S_CLUSTER_TOKEN is undefined
  # run_once: true

- name: DEBUG; print master url and token
  debug:
    msg: "k3s master url = {{ k3s_master_url }}, token = {{ k3s_token }}"

- name: SHELL; install calico
  shell: kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
  when: 
  - inventory_hostname in groups['k3s_masters']
  - K3S_CALICO_ENABLE is defined and K3S_CALICO_ENABLE|bool

- import_tasks: k3s-install-gpu-nvidia-drivers.yml
  when: inventory_hostname in groups['k3s_masters'] and K3S_GPU_ENABLE|bool
  environment: 
    KUBECONFIG: "/etc/rancher/k3s/k3s.yaml"

###
# Install agent nodes
####
- block:
  - name: SHELL; execute install script on agent nodes
    shell: "K3S_URL={{ k3s_master_url }} {{ k3s_token }} {{ k3s_version | default('') }} {{ install_k3s_worker_exec }} /opt/k3s/k3s_install.sh {{ k3s_docker_flag | default('') }} >/opt/k3s/install.`date +'%Y%m%d-%H:%M'`.log 2>&1"
    args:
      warn: false

  # labels may fail because it take a little before agent nodes show up in the metadata
  - name: SHELL; add label cacao.io/k3s-agent=true to all agent
    shell: "kubectl label node --overwrite=true {{ inventory_hostname }} cyverse.org/k3s-agent=true"
    delegate_to: "{{ groups['k3s_masters'][0] }}"
    retries: 60
    delay: 5
    register: result
    until: result.rc == 0
  when: groups['k3s_agents'] is defined and inventory_hostname in groups['k3s_agents']

- name: SHELL; add index cyverse.org/k3s-agent-index=n for each agent
  shell: "kubectl label node --overwrite=true {{ groups['k3s_agents'][idx] }} cyverse.org/k3s-agent-index={{ idx }}"
  loop: "{{ groups['k3s_agents'] }}"
  loop_control:
    index_var: idx
  delegate_to: "{{ groups['k3s_masters'][0] }}"
  when: groups['k3s_agents'] is defined
