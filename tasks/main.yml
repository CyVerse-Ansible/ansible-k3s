---
- name: Gather OS-specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}.yml"

# otherwise, it's set by vars and defaults
- name: SET_FACT; INTERNAL_DOCKER_ENABLE = K3S_DOCKER_ENABLE
  set_fact:
    INTERNAL_DOCKER_ENABLE: "{{ K3S_DOCKER_ENABLE }}"
  when: K3S_DOCKER_ENABLE is defined

# this sets up preliminary settings for multinode k3s
- block:
    - name: SYSCTL; enable forwarding ipv4
      sysctl:
        name: net.ipv4.ip_forward
        value: 1
        state: present

    - name: SYSCTL; enable forwarding ipv6
      sysctl:
        name: net.ipv4.ip_forward
        value: 1
        state: present

    # - name: SYSCTL; enable net.bridge.bridge-nf-call-iptables
    #   sysctl:
    #     name: net.bridge.bridge-nf-call-iptables
    #     value: 1
    #     state: present

    # - name: SYSCTL; net.bridge.bridge-nf-call-ip6tables
    #   sysctl:
    #     name: net.bridge.bridge-nf-call-ip6tables
    #     value: 1
    #     state: present
  when: K3S_IS_MULTINODE|bool

# this is only necessary if K3S_GPU_ENABLE
- block:
    - name: FILE; ensure /etc/containerd exists
      file:
        path: /etc/containerd
        state: directory
        mode: "0777"

    - name: TEMPLATE; create /etc/containerd/config.toml
      template:
        src: containerd-config.toml.j2
        dest:  /etc/containerd/config.toml
        mode: 0644
      register: containerd_toml

    - name: SYSTEMD; restart containerd, only if containerd_toml changed
      systemd:
        name: containerd
        state: restarted
      when: containerd_toml.changed

    - block:
        - name: TEMPLATE; /etc/docker/daemon.json
          template:
            src: docker-daemon.json.j2
            dest: /etc/docker/daemon.json
            mode: 0644
          register: docker_daemon_json

        - name: SYSTEMD; restart docker, only containerd_toml changed as well (jic) or docker_daemon_json
          systemd:
            name: docker
            state: restarted
            daemon_reload: yes
          when: containerd_toml.changed or docker_daemon_json.changed
      when: INTERNAL_DOCKER_ENABLE|bool
  when: K3S_GPU_ENABLE|bool

- name: FILE; create /opt/k3s to be used for install log and passwords, if relevant
  file:
    path: /opt/k3s
    state: directory
    mode: 0755

- import_tasks: postgresql.yml
  when: inventory_hostname in groups['k3s_masters'] and K3S_POSTGRESQL_ENABLE is defined and K3S_POSTGRESQL_ENABLE|bool

- import_tasks: firewall-Ubuntu.yml
  when: ansible_distribution  == "Ubuntu" and K3S_FIREWALL_MANAGE is defined and K3S_FIREWALL_MANAGE|bool

- import_tasks: firewall-Redhat.yml
  when: ansible_distribution  == "AlmaLinux" or ansible_distribution  == "Rocky" or ansible_distribution  == "CentOS"

- name: SHELL; uninstall if K3S_FORCE_UNINSTALL; if error, we'll assume it was already uninstalled
  shell: /usr/local/bin/k3s-uninstall.sh
  ignore_errors: true
  when: inventory_hostname in groups['k3s_cluster'] and K3S_FORCE_UNINSTALL is defined and K3S_FORCE_UNINSTALL|bool

# helm is needed for some services
- block:
    - name: SHELL; locate helm binary
      shell:
        cmd: command -v helm
      register: helm_found
      ignore_errors: true

    - name: adjust helm path based on env
      set_fact:
        HELM_INSTALL_DIR: "HELM_INSTALL_DIR=/usr/bin"
      when: '"/usr/local/bin" not in ansible_env.PATH'

    - name: SHELL; install helm, if not found
      shell:
        cmd: curl https://raw.githubusercontent.com/helm/helm/HEAD/scripts/get-helm-3 | {{ HELM_INSTALL_DIR | default('') }} bash
      when: helm_found is failed
  when: inventory_hostname in groups['k3s_masters']

- import_tasks: k3s-install.yml
